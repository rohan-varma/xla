module @IrToHlo.462 attributes {mhlo.cross_program_prefetches = [], mhlo.is_dynamic = false, mhlo.use_auto_spmd_partitioning = false} {
  func.func @main(%arg0: tensor<1000xf32>, %arg1: tensor<1000x512xf32>, %arg2: tensor<512xf32>, %arg3: tensor<512x256x1x1xf32>, %arg4: tensor<256xf32>, %arg5: tensor<256x128x1x1xf32>, %arg6: tensor<128xf32>, %arg7: tensor<128x64x1x1xf32>, %arg8: tensor<64xf32>, %arg9: tensor<64x3x7x7xf32>, %arg10: tensor<1x3x224x224xf32>, %arg11: tensor<64xf32>, %arg12: tensor<64x64x3x3xf32>, %arg13: tensor<64xf32>, %arg14: tensor<64x64x3x3xf32>, %arg15: tensor<64xf32>, %arg16: tensor<64x64x3x3xf32>, %arg17: tensor<64xf32>, %arg18: tensor<64x64x3x3xf32>, %arg19: tensor<128xf32>, %arg20: tensor<128x128x3x3xf32>, %arg21: tensor<128xf32>, %arg22: tensor<128x64x3x3xf32>, %arg23: tensor<128xf32>, %arg24: tensor<128x128x3x3xf32>, %arg25: tensor<128xf32>, %arg26: tensor<128x128x3x3xf32>, %arg27: tensor<256xf32>, %arg28: tensor<256x256x3x3xf32>, %arg29: tensor<256xf32>, %arg30: tensor<256x128x3x3xf32>, %arg31: tensor<256xf32>, %arg32: tensor<256x256x3x3xf32>, %arg33: tensor<256xf32>, %arg34: tensor<256x256x3x3xf32>, %arg35: tensor<512xf32>, %arg36: tensor<512x512x3x3xf32>, %arg37: tensor<512xf32>, %arg38: tensor<512x256x3x3xf32>, %arg39: tensor<512xf32>, %arg40: tensor<512x512x3x3xf32>, %arg41: tensor<512xf32>, %arg42: tensor<512x512x3x3xf32>) -> tensor<1x1000xf32> {
    %0 = stablehlo.constant dense<0.0204081628> : tensor<1x512xf32>
    %1 = stablehlo.constant dense<0.000000e+00> : tensor<1x512x7x7xf32>
    %2 = stablehlo.constant dense<0.000000e+00> : tensor<1x256x14x14xf32>
    %3 = stablehlo.constant dense<0.000000e+00> : tensor<1x128x28x28xf32>
    %4 = stablehlo.constant dense<0.000000e+00> : tensor<1x64x56x56xf32>
    %5 = stablehlo.constant dense<0.000000e+00> : tensor<1x64x112x112xf32>
    %6 = stablehlo.constant dense<0xFF800000> : tensor<f32>
    %7 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %8 = stablehlo.uniform_quantize %arg10 : (tensor<1x3x224x224xf32>) -> tensor<1x3x224x224x!quant.uniform<i8:f32, 1.000000e+00>>
    %9 = stablehlo.uniform_dequantize %8 : (tensor<1x3x224x224x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x3x224x224xf32>
    %10 = stablehlo.uniform_quantize %arg9 : (tensor<64x3x7x7xf32>) -> tensor<64x3x7x7x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %11 = stablehlo.uniform_dequantize %10 : (tensor<64x3x7x7x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<64x3x7x7xf32>
    %12 = stablehlo.convolution(%9, %11) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [2, 2], pad = [[3, 3], [3, 3]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x3x224x224xf32>, tensor<64x3x7x7xf32>) -> tensor<1x64x112x112xf32>
    %13 = stablehlo.broadcast_in_dim %arg8, dims = [1] : (tensor<64xf32>) -> tensor<1x64x112x112xf32>
    %14 = stablehlo.add %12, %13 : tensor<1x64x112x112xf32>
    %15 = stablehlo.maximum %14, %5 : tensor<1x64x112x112xf32>
    %16 = stablehlo.uniform_quantize %15 : (tensor<1x64x112x112xf32>) -> tensor<1x64x112x112x!quant.uniform<i8:f32, 1.000000e+00>>
    %17 = stablehlo.uniform_dequantize %16 : (tensor<1x64x112x112x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x112x112xf32>
    %18 = stablehlo.pad %17, %6, low = [0, 0, 1, 1], high = [0, 0, 1, 1], interior = [0, 0, 0, 0] : (tensor<1x64x112x112xf32>, tensor<f32>) -> tensor<1x64x114x114xf32>
    %19 = "stablehlo.reduce_window"(%18, %6) ({
    ^bb0(%arg43: tensor<f32>, %arg44: tensor<f32>):
      %219 = stablehlo.maximum %arg43, %arg44 : tensor<f32>
      stablehlo.return %219 : tensor<f32>
    }) {base_dilations = dense<1> : tensor<4xi64>, padding = dense<0> : tensor<4x2xi64>, window_dilations = dense<1> : tensor<4xi64>, window_dimensions = dense<[1, 1, 3, 3]> : tensor<4xi64>, window_strides = dense<[1, 1, 2, 2]> : tensor<4xi64>} : (tensor<1x64x114x114xf32>, tensor<f32>) -> tensor<1x64x56x56xf32>
    %20 = stablehlo.uniform_quantize %19 : (tensor<1x64x56x56xf32>) -> tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>
    %21 = stablehlo.uniform_dequantize %20 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %22 = stablehlo.uniform_quantize %arg14 : (tensor<64x64x3x3xf32>) -> tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %23 = stablehlo.uniform_dequantize %22 : (tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<64x64x3x3xf32>
    %24 = stablehlo.convolution(%21, %23) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x64x56x56xf32>, tensor<64x64x3x3xf32>) -> tensor<1x64x56x56xf32>
    %25 = stablehlo.broadcast_in_dim %arg13, dims = [1] : (tensor<64xf32>) -> tensor<1x64x56x56xf32>
    %26 = stablehlo.add %24, %25 : tensor<1x64x56x56xf32>
    %27 = stablehlo.maximum %26, %4 : tensor<1x64x56x56xf32>
    %28 = stablehlo.uniform_quantize %27 : (tensor<1x64x56x56xf32>) -> tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>
    %29 = stablehlo.uniform_dequantize %28 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %30 = stablehlo.uniform_quantize %arg12 : (tensor<64x64x3x3xf32>) -> tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %31 = stablehlo.uniform_dequantize %30 : (tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<64x64x3x3xf32>
    %32 = stablehlo.convolution(%29, %31) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x64x56x56xf32>, tensor<64x64x3x3xf32>) -> tensor<1x64x56x56xf32>
    %33 = stablehlo.broadcast_in_dim %arg11, dims = [1] : (tensor<64xf32>) -> tensor<1x64x56x56xf32>
    %34 = stablehlo.add %32, %33 : tensor<1x64x56x56xf32>
    %35 = stablehlo.uniform_quantize %34 : (tensor<1x64x56x56xf32>) -> tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>
    %36 = stablehlo.uniform_dequantize %35 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %37 = stablehlo.uniform_dequantize %20 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %38 = stablehlo.add %36, %37 : tensor<1x64x56x56xf32>
    %39 = stablehlo.maximum %38, %4 : tensor<1x64x56x56xf32>
    %40 = stablehlo.uniform_quantize %39 : (tensor<1x64x56x56xf32>) -> tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>
    %41 = stablehlo.uniform_dequantize %40 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %42 = stablehlo.uniform_quantize %arg18 : (tensor<64x64x3x3xf32>) -> tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %43 = stablehlo.uniform_dequantize %42 : (tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<64x64x3x3xf32>
    %44 = stablehlo.convolution(%41, %43) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x64x56x56xf32>, tensor<64x64x3x3xf32>) -> tensor<1x64x56x56xf32>
    %45 = stablehlo.broadcast_in_dim %arg17, dims = [1] : (tensor<64xf32>) -> tensor<1x64x56x56xf32>
    %46 = stablehlo.add %44, %45 : tensor<1x64x56x56xf32>
    %47 = stablehlo.maximum %46, %4 : tensor<1x64x56x56xf32>
    %48 = stablehlo.uniform_quantize %47 : (tensor<1x64x56x56xf32>) -> tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>
    %49 = stablehlo.uniform_dequantize %48 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %50 = stablehlo.uniform_quantize %arg16 : (tensor<64x64x3x3xf32>) -> tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %51 = stablehlo.uniform_dequantize %50 : (tensor<64x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<64x64x3x3xf32>
    %52 = stablehlo.convolution(%49, %51) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x64x56x56xf32>, tensor<64x64x3x3xf32>) -> tensor<1x64x56x56xf32>
    %53 = stablehlo.broadcast_in_dim %arg15, dims = [1] : (tensor<64xf32>) -> tensor<1x64x56x56xf32>
    %54 = stablehlo.add %52, %53 : tensor<1x64x56x56xf32>
    %55 = stablehlo.uniform_quantize %54 : (tensor<1x64x56x56xf32>) -> tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>
    %56 = stablehlo.uniform_dequantize %55 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %57 = stablehlo.uniform_dequantize %40 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %58 = stablehlo.add %56, %57 : tensor<1x64x56x56xf32>
    %59 = stablehlo.maximum %58, %4 : tensor<1x64x56x56xf32>
    %60 = stablehlo.uniform_quantize %59 : (tensor<1x64x56x56xf32>) -> tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>
    %61 = stablehlo.uniform_dequantize %60 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %62 = stablehlo.uniform_quantize %arg22 : (tensor<128x64x3x3xf32>) -> tensor<128x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %63 = stablehlo.uniform_dequantize %62 : (tensor<128x64x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<128x64x3x3xf32>
    %64 = stablehlo.convolution(%61, %63) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [2, 2], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x64x56x56xf32>, tensor<128x64x3x3xf32>) -> tensor<1x128x28x28xf32>
    %65 = stablehlo.broadcast_in_dim %arg21, dims = [1] : (tensor<128xf32>) -> tensor<1x128x28x28xf32>
    %66 = stablehlo.add %64, %65 : tensor<1x128x28x28xf32>
    %67 = stablehlo.maximum %66, %3 : tensor<1x128x28x28xf32>
    %68 = stablehlo.uniform_quantize %67 : (tensor<1x128x28x28xf32>) -> tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>
    %69 = stablehlo.uniform_dequantize %68 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %70 = stablehlo.uniform_quantize %arg20 : (tensor<128x128x3x3xf32>) -> tensor<128x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %71 = stablehlo.uniform_dequantize %70 : (tensor<128x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<128x128x3x3xf32>
    %72 = stablehlo.convolution(%69, %71) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x128x28x28xf32>, tensor<128x128x3x3xf32>) -> tensor<1x128x28x28xf32>
    %73 = stablehlo.broadcast_in_dim %arg19, dims = [1] : (tensor<128xf32>) -> tensor<1x128x28x28xf32>
    %74 = stablehlo.add %72, %73 : tensor<1x128x28x28xf32>
    %75 = stablehlo.uniform_quantize %74 : (tensor<1x128x28x28xf32>) -> tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>
    %76 = stablehlo.uniform_dequantize %75 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %77 = stablehlo.uniform_dequantize %60 : (tensor<1x64x56x56x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x64x56x56xf32>
    %78 = stablehlo.uniform_quantize %arg7 : (tensor<128x64x1x1xf32>) -> tensor<128x64x1x1x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %79 = stablehlo.uniform_dequantize %78 : (tensor<128x64x1x1x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<128x64x1x1xf32>
    %80 = stablehlo.convolution(%77, %79) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [2, 2], pad = [[0, 0], [0, 0]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x64x56x56xf32>, tensor<128x64x1x1xf32>) -> tensor<1x128x28x28xf32>
    %81 = stablehlo.broadcast_in_dim %arg6, dims = [1] : (tensor<128xf32>) -> tensor<1x128x28x28xf32>
    %82 = stablehlo.add %80, %81 : tensor<1x128x28x28xf32>
    %83 = stablehlo.uniform_quantize %82 : (tensor<1x128x28x28xf32>) -> tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>
    %84 = stablehlo.uniform_dequantize %83 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %85 = stablehlo.add %76, %84 : tensor<1x128x28x28xf32>
    %86 = stablehlo.maximum %85, %3 : tensor<1x128x28x28xf32>
    %87 = stablehlo.uniform_quantize %86 : (tensor<1x128x28x28xf32>) -> tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>
    %88 = stablehlo.uniform_dequantize %87 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %89 = stablehlo.uniform_quantize %arg26 : (tensor<128x128x3x3xf32>) -> tensor<128x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %90 = stablehlo.uniform_dequantize %89 : (tensor<128x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<128x128x3x3xf32>
    %91 = stablehlo.convolution(%88, %90) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x128x28x28xf32>, tensor<128x128x3x3xf32>) -> tensor<1x128x28x28xf32>
    %92 = stablehlo.broadcast_in_dim %arg25, dims = [1] : (tensor<128xf32>) -> tensor<1x128x28x28xf32>
    %93 = stablehlo.add %91, %92 : tensor<1x128x28x28xf32>
    %94 = stablehlo.maximum %93, %3 : tensor<1x128x28x28xf32>
    %95 = stablehlo.uniform_quantize %94 : (tensor<1x128x28x28xf32>) -> tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>
    %96 = stablehlo.uniform_dequantize %95 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %97 = stablehlo.uniform_quantize %arg24 : (tensor<128x128x3x3xf32>) -> tensor<128x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %98 = stablehlo.uniform_dequantize %97 : (tensor<128x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<128x128x3x3xf32>
    %99 = stablehlo.convolution(%96, %98) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x128x28x28xf32>, tensor<128x128x3x3xf32>) -> tensor<1x128x28x28xf32>
    %100 = stablehlo.broadcast_in_dim %arg23, dims = [1] : (tensor<128xf32>) -> tensor<1x128x28x28xf32>
    %101 = stablehlo.add %99, %100 : tensor<1x128x28x28xf32>
    %102 = stablehlo.uniform_quantize %101 : (tensor<1x128x28x28xf32>) -> tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>
    %103 = stablehlo.uniform_dequantize %102 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %104 = stablehlo.uniform_dequantize %87 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %105 = stablehlo.add %103, %104 : tensor<1x128x28x28xf32>
    %106 = stablehlo.maximum %105, %3 : tensor<1x128x28x28xf32>
    %107 = stablehlo.uniform_quantize %106 : (tensor<1x128x28x28xf32>) -> tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>
    %108 = stablehlo.uniform_dequantize %107 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %109 = stablehlo.uniform_quantize %arg30 : (tensor<256x128x3x3xf32>) -> tensor<256x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %110 = stablehlo.uniform_dequantize %109 : (tensor<256x128x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<256x128x3x3xf32>
    %111 = stablehlo.convolution(%108, %110) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [2, 2], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x128x28x28xf32>, tensor<256x128x3x3xf32>) -> tensor<1x256x14x14xf32>
    %112 = stablehlo.broadcast_in_dim %arg29, dims = [1] : (tensor<256xf32>) -> tensor<1x256x14x14xf32>
    %113 = stablehlo.add %111, %112 : tensor<1x256x14x14xf32>
    %114 = stablehlo.maximum %113, %2 : tensor<1x256x14x14xf32>
    %115 = stablehlo.uniform_quantize %114 : (tensor<1x256x14x14xf32>) -> tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>
    %116 = stablehlo.uniform_dequantize %115 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %117 = stablehlo.uniform_quantize %arg28 : (tensor<256x256x3x3xf32>) -> tensor<256x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %118 = stablehlo.uniform_dequantize %117 : (tensor<256x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<256x256x3x3xf32>
    %119 = stablehlo.convolution(%116, %118) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x256x14x14xf32>, tensor<256x256x3x3xf32>) -> tensor<1x256x14x14xf32>
    %120 = stablehlo.broadcast_in_dim %arg27, dims = [1] : (tensor<256xf32>) -> tensor<1x256x14x14xf32>
    %121 = stablehlo.add %119, %120 : tensor<1x256x14x14xf32>
    %122 = stablehlo.uniform_quantize %121 : (tensor<1x256x14x14xf32>) -> tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>
    %123 = stablehlo.uniform_dequantize %122 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %124 = stablehlo.uniform_dequantize %107 : (tensor<1x128x28x28x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x128x28x28xf32>
    %125 = stablehlo.uniform_quantize %arg5 : (tensor<256x128x1x1xf32>) -> tensor<256x128x1x1x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %126 = stablehlo.uniform_dequantize %125 : (tensor<256x128x1x1x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<256x128x1x1xf32>
    %127 = stablehlo.convolution(%124, %126) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [2, 2], pad = [[0, 0], [0, 0]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x128x28x28xf32>, tensor<256x128x1x1xf32>) -> tensor<1x256x14x14xf32>
    %128 = stablehlo.broadcast_in_dim %arg4, dims = [1] : (tensor<256xf32>) -> tensor<1x256x14x14xf32>
    %129 = stablehlo.add %127, %128 : tensor<1x256x14x14xf32>
    %130 = stablehlo.uniform_quantize %129 : (tensor<1x256x14x14xf32>) -> tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>
    %131 = stablehlo.uniform_dequantize %130 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %132 = stablehlo.add %123, %131 : tensor<1x256x14x14xf32>
    %133 = stablehlo.maximum %132, %2 : tensor<1x256x14x14xf32>
    %134 = stablehlo.uniform_quantize %133 : (tensor<1x256x14x14xf32>) -> tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>
    %135 = stablehlo.uniform_dequantize %134 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %136 = stablehlo.uniform_quantize %arg34 : (tensor<256x256x3x3xf32>) -> tensor<256x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %137 = stablehlo.uniform_dequantize %136 : (tensor<256x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<256x256x3x3xf32>
    %138 = stablehlo.convolution(%135, %137) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x256x14x14xf32>, tensor<256x256x3x3xf32>) -> tensor<1x256x14x14xf32>
    %139 = stablehlo.broadcast_in_dim %arg33, dims = [1] : (tensor<256xf32>) -> tensor<1x256x14x14xf32>
    %140 = stablehlo.add %138, %139 : tensor<1x256x14x14xf32>
    %141 = stablehlo.maximum %140, %2 : tensor<1x256x14x14xf32>
    %142 = stablehlo.uniform_quantize %141 : (tensor<1x256x14x14xf32>) -> tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>
    %143 = stablehlo.uniform_dequantize %142 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %144 = stablehlo.uniform_quantize %arg32 : (tensor<256x256x3x3xf32>) -> tensor<256x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %145 = stablehlo.uniform_dequantize %144 : (tensor<256x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<256x256x3x3xf32>
    %146 = stablehlo.convolution(%143, %145) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x256x14x14xf32>, tensor<256x256x3x3xf32>) -> tensor<1x256x14x14xf32>
    %147 = stablehlo.broadcast_in_dim %arg31, dims = [1] : (tensor<256xf32>) -> tensor<1x256x14x14xf32>
    %148 = stablehlo.add %146, %147 : tensor<1x256x14x14xf32>
    %149 = stablehlo.uniform_quantize %148 : (tensor<1x256x14x14xf32>) -> tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>
    %150 = stablehlo.uniform_dequantize %149 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %151 = stablehlo.uniform_dequantize %134 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %152 = stablehlo.add %150, %151 : tensor<1x256x14x14xf32>
    %153 = stablehlo.maximum %152, %2 : tensor<1x256x14x14xf32>
    %154 = stablehlo.uniform_quantize %153 : (tensor<1x256x14x14xf32>) -> tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>
    %155 = stablehlo.uniform_dequantize %154 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %156 = stablehlo.uniform_quantize %arg38 : (tensor<512x256x3x3xf32>) -> tensor<512x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %157 = stablehlo.uniform_dequantize %156 : (tensor<512x256x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<512x256x3x3xf32>
    %158 = stablehlo.convolution(%155, %157) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [2, 2], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x256x14x14xf32>, tensor<512x256x3x3xf32>) -> tensor<1x512x7x7xf32>
    %159 = stablehlo.broadcast_in_dim %arg37, dims = [1] : (tensor<512xf32>) -> tensor<1x512x7x7xf32>
    %160 = stablehlo.add %158, %159 : tensor<1x512x7x7xf32>
    %161 = stablehlo.maximum %160, %1 : tensor<1x512x7x7xf32>
    %162 = stablehlo.uniform_quantize %161 : (tensor<1x512x7x7xf32>) -> tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>
    %163 = stablehlo.uniform_dequantize %162 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %164 = stablehlo.uniform_quantize %arg36 : (tensor<512x512x3x3xf32>) -> tensor<512x512x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %165 = stablehlo.uniform_dequantize %164 : (tensor<512x512x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<512x512x3x3xf32>
    %166 = stablehlo.convolution(%163, %165) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x512x7x7xf32>, tensor<512x512x3x3xf32>) -> tensor<1x512x7x7xf32>
    %167 = stablehlo.broadcast_in_dim %arg35, dims = [1] : (tensor<512xf32>) -> tensor<1x512x7x7xf32>
    %168 = stablehlo.add %166, %167 : tensor<1x512x7x7xf32>
    %169 = stablehlo.uniform_quantize %168 : (tensor<1x512x7x7xf32>) -> tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>
    %170 = stablehlo.uniform_dequantize %169 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %171 = stablehlo.uniform_dequantize %154 : (tensor<1x256x14x14x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x256x14x14xf32>
    %172 = stablehlo.uniform_quantize %arg3 : (tensor<512x256x1x1xf32>) -> tensor<512x256x1x1x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %173 = stablehlo.uniform_dequantize %172 : (tensor<512x256x1x1x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<512x256x1x1xf32>
    %174 = stablehlo.convolution(%171, %173) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [2, 2], pad = [[0, 0], [0, 0]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x256x14x14xf32>, tensor<512x256x1x1xf32>) -> tensor<1x512x7x7xf32>
    %175 = stablehlo.broadcast_in_dim %arg2, dims = [1] : (tensor<512xf32>) -> tensor<1x512x7x7xf32>
    %176 = stablehlo.add %174, %175 : tensor<1x512x7x7xf32>
    %177 = stablehlo.uniform_quantize %176 : (tensor<1x512x7x7xf32>) -> tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>
    %178 = stablehlo.uniform_dequantize %177 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %179 = stablehlo.add %170, %178 : tensor<1x512x7x7xf32>
    %180 = stablehlo.maximum %179, %1 : tensor<1x512x7x7xf32>
    %181 = stablehlo.uniform_quantize %180 : (tensor<1x512x7x7xf32>) -> tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>
    %182 = stablehlo.uniform_dequantize %181 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %183 = stablehlo.uniform_quantize %arg42 : (tensor<512x512x3x3xf32>) -> tensor<512x512x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %184 = stablehlo.uniform_dequantize %183 : (tensor<512x512x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<512x512x3x3xf32>
    %185 = stablehlo.convolution(%182, %184) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x512x7x7xf32>, tensor<512x512x3x3xf32>) -> tensor<1x512x7x7xf32>
    %186 = stablehlo.broadcast_in_dim %arg41, dims = [1] : (tensor<512xf32>) -> tensor<1x512x7x7xf32>
    %187 = stablehlo.add %185, %186 : tensor<1x512x7x7xf32>
    %188 = stablehlo.maximum %187, %1 : tensor<1x512x7x7xf32>
    %189 = stablehlo.uniform_quantize %188 : (tensor<1x512x7x7xf32>) -> tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>
    %190 = stablehlo.uniform_dequantize %189 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %191 = stablehlo.uniform_quantize %arg40 : (tensor<512x512x3x3xf32>) -> tensor<512x512x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %192 = stablehlo.uniform_dequantize %191 : (tensor<512x512x3x3x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<512x512x3x3xf32>
    %193 = stablehlo.convolution(%190, %192) dim_numbers = [b, f, 0, 1]x[o, i, 0, 1]->[b, f, 0, 1], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], lhs_dilate = [1, 1], rhs_dilate = [1, 1], reverse = [0, 0]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64, precision_config = [#stablehlo<precision DEFAULT>, #stablehlo<precision DEFAULT>]} : (tensor<1x512x7x7xf32>, tensor<512x512x3x3xf32>) -> tensor<1x512x7x7xf32>
    %194 = stablehlo.broadcast_in_dim %arg39, dims = [1] : (tensor<512xf32>) -> tensor<1x512x7x7xf32>
    %195 = stablehlo.add %193, %194 : tensor<1x512x7x7xf32>
    %196 = stablehlo.uniform_quantize %195 : (tensor<1x512x7x7xf32>) -> tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>
    %197 = stablehlo.uniform_dequantize %196 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %198 = stablehlo.uniform_dequantize %181 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %199 = stablehlo.add %197, %198 : tensor<1x512x7x7xf32>
    %200 = stablehlo.maximum %199, %1 : tensor<1x512x7x7xf32>
    %201 = stablehlo.uniform_quantize %200 : (tensor<1x512x7x7xf32>) -> tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>
    %202 = stablehlo.uniform_dequantize %201 : (tensor<1x512x7x7x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x7x7xf32>
    %203 = stablehlo.reduce(%202 init: %7) across dimensions = [3, 2] : (tensor<1x512x7x7xf32>, tensor<f32>) -> tensor<1x512xf32>
     reducer(%arg43: tensor<f32>, %arg44: tensor<f32>)  {
      %219 = stablehlo.add %arg43, %arg44 : tensor<f32>
      stablehlo.return %219 : tensor<f32>
    }
    %204 = stablehlo.multiply %203, %0 : tensor<1x512xf32>
    %205 = stablehlo.reshape %204 : (tensor<1x512xf32>) -> tensor<1x512x1x1xf32>
    %206 = stablehlo.uniform_quantize %205 : (tensor<1x512x1x1xf32>) -> tensor<1x512x1x1x!quant.uniform<i8:f32, 1.000000e+00>>
    %207 = stablehlo.uniform_dequantize %206 : (tensor<1x512x1x1x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512x1x1xf32>
    %208 = stablehlo.reshape %207 : (tensor<1x512x1x1xf32>) -> tensor<1x512xf32>
    %209 = stablehlo.uniform_quantize %208 : (tensor<1x512xf32>) -> tensor<1x512x!quant.uniform<i8:f32, 1.000000e+00>>
    %210 = stablehlo.uniform_dequantize %209 : (tensor<1x512x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x512xf32>
    %211 = stablehlo.uniform_quantize %arg1 : (tensor<1000x512xf32>) -> tensor<1000x512x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>
    %212 = stablehlo.uniform_dequantize %211 : (tensor<1000x512x!quant.uniform<i8<-127:127>:f32, 1.000000e+00>>) -> tensor<1000x512xf32>
    %213 = stablehlo.transpose %212, dims = [1, 0] {result_layout = dense<[0, 1]> : tensor<2xindex>, xla_shape = "f32[512,1000]{0,1}"} : (tensor<1000x512xf32>) -> tensor<512x1000xf32>
    %214 = stablehlo.dot %210, %213, precision = [DEFAULT, DEFAULT] : (tensor<1x512xf32>, tensor<512x1000xf32>) -> tensor<1x1000xf32>
    %215 = stablehlo.reshape %arg0 : (tensor<1000xf32>) -> tensor<1x1000xf32>
    %216 = stablehlo.add %214, %215 : tensor<1x1000xf32>
    %217 = stablehlo.uniform_quantize %216 : (tensor<1x1000xf32>) -> tensor<1x1000x!quant.uniform<i8:f32, 1.000000e+00>>
    %218 = stablehlo.uniform_dequantize %217 : (tensor<1x1000x!quant.uniform<i8:f32, 1.000000e+00>>) -> tensor<1x1000xf32>
    return %218 : tensor<1x1000xf32>
  }
}
